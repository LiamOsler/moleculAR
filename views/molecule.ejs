<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <title><%= title %></title>
    <link rel='stylesheet' href='/styles/style.css' />
    <script src='/js/three.js'></script>
    <!-- include jsartookit -->
    <script src="/jsartoolkit5/artoolkit.min.js"></script>
    <script src="/jsartoolkit5/artoolkit.api.js"></script>
    <!-- include threex.artoolkit -->
    <script src="/threex/threex-artoolkitsource.js"></script>
    <script src="/threex/threex-artoolkitcontext.js"></script>
    <script src="/threex/threex-arbasecontrols.js"></script>
    <script src="/threex/threex-armarkercontrols.js"></script>

    <!-- include datgui debugging purposes -->
    <script type="text/javascript" src="/datgui/dat.gui.min.js"></script>

    <!-- include Mol file to CJSON conversion extras -->
    <script src="/cjson/converter.js"></script>

    <style>
      #gui_container{
        position: absolute;
        bottom: 0;
        right: 0;
        z-index: 1000 !important;
      }
      #text{
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1000 !important;
        color: white;
        font-family: "Lucida Grande", sans-serif;
        padding: 1em;
        background-color: #000;
      }

      #gui{
        transform:translate(0, -20px);
      }
    </style>
  </head>

<html>
  <body style='margin : 0px; overflow: hidden; font-family: Monospace;'>
  <div id="gui_container"></div>
  <div id="text">
      <%= name %> (<%= formula %>)
  </div>
  <!-- 
    Example created by Lee Stemkoski: https://github.com/stemkoski
    Based on the AR.js library and examples created by Jerome Etienne: https://github.com/jeromeetienne/AR.js/
  -->
  <script>
  
  var scene, camera, renderer, clock, deltaTime, totalTime;
  
  var arToolkitSource, arToolkitContext;
  
  var markerRoot1, markerRoot2;

  var moleculeGroup = new THREE.Group();

  var autoRotate = {
    switch: false
  }

  var mesh1;
  
  initialize();
  animate();
  
  function initialize()
  {
    scene = new THREE.Scene();
  
    let ambientLight = new THREE.AmbientLight( 0xffffff, 1 );
    scene.add( ambientLight );
    
    let spotLight = new THREE.SpotLight( 0xffffff );
    spotLight.position.set( 100, 1000, 100 );

    spotLight.castShadow = true;

    spotLight.shadow.mapSize.width = 1024;
    spotLight.shadow.mapSize.height = 1024;

    spotLight.shadow.camera.near = 500;
    spotLight.shadow.camera.far = 4000;
    spotLight.shadow.camera.fov = 30;

    scene.add( spotLight );
    
          
    camera = new THREE.Camera();
    scene.add(camera);
  
    renderer = new THREE.WebGLRenderer({
      antialias : true,
      alpha: true
    });
    renderer.setClearColor(new THREE.Color('lightgrey'), 0)
    renderer.setSize( 640, 480 );
    renderer.domElement.style.position = 'absolute'
    renderer.domElement.style.top = '0px'
    renderer.domElement.style.left = '0px'
    document.body.appendChild( renderer.domElement );
  
    clock = new THREE.Clock();
    deltaTime = 0;
    totalTime = 0;
    
    ////////////////////////////////////////////////////////////
    // setup arToolkitSource
    ////////////////////////////////////////////////////////////
  
    arToolkitSource = new THREEx.ArToolkitSource({
      sourceType : 'webcam',
    });
  
    function onResize()
    {
      arToolkitSource.onResize()	
      arToolkitSource.copySizeTo(renderer.domElement)	
      if ( arToolkitContext.arController !== null )
      {
        arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)	
      }	
    }
  
    arToolkitSource.init(function onReady(){
      onResize()
    });
    
    // handle resize event
    window.addEventListener('resize', function(){
      onResize()
    });
    
    ////////////////////////////////////////////////////////////
    // setup arToolkitContext
    ////////////////////////////////////////////////////////////	
  
    // create atToolkitContext
    arToolkitContext = new THREEx.ArToolkitContext({
      cameraParametersUrl: '/data/camera_para.dat',
      detectionMode: 'mono'
    });
    
    // copy projection matrix to camera when initialization complete
    arToolkitContext.init( function onCompleted(){
      camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );
    });
  
    ////////////////////////////////////////////////////////////
    // setup markerRoots
    ////////////////////////////////////////////////////////////
  
    // build markerControls
    markerRoot1 = new THREE.Group();
    scene.add(markerRoot1);
    let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {
      type: 'pattern', patternUrl: "/data/kanji.patt",
    })
  


    ////////////////////////////////////////////////////////////
    // setup molecule
    ////////////////////////////////////////////////////////////
    //Load the molfile:
    let molfile = (<%- JSON.stringify(molfile) %>);
    let molObject = molFileToJSON(molfile);

    console.log(molObject);

    //Set the limits of the geometry to 0:
    let limits = {
      x: {
        min: 0,
        max: 0
      },
      y: {
        min: 0,
        max: 0
      },
      z: {
        min: 0,
        max: 0
      }
    }

    for(let item of molObject.atoms){
      if(item.x < limits.x.min){
        limits.x.min = item.x;
      }
      if(item.x > limits.x.max){
        limits.x.max = item.x;
      }
      if(item.y < limits.y.min){
        limits.y.min = item.y;
      }
      if(item.y > limits.y.max){
        limits.y.max = item.y;
      }
      if(item.z < limits.z.min){
        limits.z.min = item.z;
      }
      if(item.z > limits.z.max){
        limits.z.max = item.z;
      }
    }

    //Iterate through the atoms, specify materials and geometry, and add them to the molecule group:
    for(let item of molObject.atoms){
      let material;
      let meshNormalMaterialBonds = new THREE.MeshNormalMaterial({
        transparent: true,
        opacity: 0.1,
        side: THREE.DoubleSide
      });

      let geometry;
      switch(item.type){
        case "C":
          geometry = new THREE.SphereGeometry( .2, 32, 16 );
          geometry2 = new THREE.SphereGeometry( .3, 32, 16 );
          material = new THREE.MeshPhongMaterial( { 
            color: 0x555555,
            transparent: true,
            opacity: 0.8,
            side: THREE.DoubleSide
          } );
          break;
        case "H":
          geometry = new THREE.SphereGeometry( .05, 32, 16 );
          geometry2 = new THREE.SphereGeometry( .3, 32, 16 );
          material = new THREE.MeshPhongMaterial( { 
            color: 0xffffff,
            transparent: true,
            opacity: 0.9,
            side: THREE.DoubleSide
          } );
          break;
        case "O":
          geometry = new THREE.SphereGeometry( .1, 32, 16 );
          geometry2 = new THREE.SphereGeometry( .3, 32, 16 );
          material = new THREE.MeshPhongMaterial( { 
            color: 0xff0000,
            transparent: true,
            opacity: 0.8,
            side: THREE.DoubleSide
          } );
          break;
        case "N":
          geometry = new THREE.SphereGeometry( .1, 32, 16 );
          geometry2 = new THREE.SphereGeometry( .3, 32, 16 );
          material = new THREE.MeshPhongMaterial( { 
            color: 0x189AB4,
            transparent: true,
            opacity: 0.8,
            side: THREE.DoubleSide
          } );
          break;
        case "S":
          geometry = new THREE.SphereGeometry( .1, 32, 16 );
          geometry2 = new THREE.SphereGeometry( .3, 32, 16 );
          material = new THREE.MeshPhongMaterial( { 
            color: 0xffff00,
            transparent: true,
            opacity: 0.8,
            side: THREE.DoubleSide
          } );
          break;
        case "P":
          geometry = new THREE.SphereGeometry( .2, 32, 16 );
          geometry2 = new THREE.SphereGeometry( .3, 32, 16 );
          material = new THREE.MeshPhongMaterial( { 
            color: 0xffa500,
            transparent: true,
            opacity: 0.8,
            side: THREE.DoubleSide
          } );
          break;
        
        default:
          geometry = new THREE.SphereGeometry( .1, 32, 16 );
          geometry2 = new THREE.SphereGeometry( .3, 32, 16 );
          material = new THREE.MeshPhongMaterial( { 
            color: 0x555555,
            transparent: true,
            opacity: 0.8,
            side: THREE.DoubleSide
          } );
      }

      const sphere = new THREE.Mesh( geometry, material );
      const normalSphere = new THREE.Mesh( geometry2, meshNormalMaterialBonds );

      sphere.position.x = item.position.y ;
      sphere.position.y = item.position.x ;
      sphere.position.z = item.position.z;
      
      normalSphere.position.x = item.position.y;
      normalSphere.position.y = item.position.x;
      normalSphere.position.z = item.position.z;
      
      moleculeGroup.add( sphere );
      moleculeGroup.add( normalSphere );
    }

    moleculeGroup.translateX(limits.x.min + (limits.x.max - limits.x.min)/2)
    moleculeGroup.translateX(limits.y.min + (limits.y.max - limits.y.min)/2)
    moleculeGroup.translateZ(limits.z.min + (limits.z.max - limits.z.min)/2)

    moleculeGroup.scale.x = 0.25;
    moleculeGroup.scale.y = 0.25;
    moleculeGroup.scale.z = 0.25;
        //GUI Configuration

    markerRoot1.add( moleculeGroup );


    var gui = new dat.GUI({ autoPlace: false });
    gui.domElement.id = 'gui';
    gui_container.appendChild(gui.domElement);
    const moleculePosition = gui.addFolder('Position')
    moleculePosition.add(moleculeGroup.position, 'x', -1, 1)
    moleculePosition.add(moleculeGroup.position, 'y', -1, 1)
    moleculePosition.add(moleculeGroup.position, 'z', -1, 1)

    const moleculeRotation = gui.addFolder('Rotation')
    moleculeRotation.add(moleculeGroup.rotation, 'x', -Math.PI*2, Math.PI*2)
    moleculeRotation.add(moleculeGroup.rotation, 'y', -Math.PI*2, Math.PI*2)
    moleculeRotation.add(moleculeGroup.rotation, 'z', -Math.PI*2, Math.PI*2)
    
    const moleculeScale = gui.addFolder('Scale')
    const scaleX = moleculeScale.add(moleculeGroup.scale, 'x', .1, 1.5).name("Scaling Factor")
    scaleX.onChange(function(value){
      moleculeGroup.scale.y = value;
      moleculeGroup.scale.z = value;
    })
    gui.add(autoRotate, "switch").name("Auto Rotate");

  }
  
  
  function update()
  {
    // update artoolkit on every frame
    if ( arToolkitSource.ready !== false )
      arToolkitContext.update( arToolkitSource.domElement );
  }
  
  
  function render()
  {
    renderer.render( scene, camera );
  }
  
  
  function animate()
  {
    requestAnimationFrame(animate);
    deltaTime = clock.getDelta();
    totalTime += deltaTime;

    if(autoRotate.switch){
      moleculeGroup.rotation.y+=.5*deltaTime;
    }
    // moleculeGroup.rotation.y+=.5*deltaTime;

    update();
    render();
  }
  
  </script>
  </body>
</html>